#!/usr/bin/env node

// modules
var async = require("async");
var fs = require("fs");
var path = require("path");
var glob = require("glob");
var getConfig = require("../lib/getConfig.js");
var logger = require("../lib/logger.js");
var elasticsearch = require("../lib/elasticsearch.js");


var config = {};
var es;

async.waterfall([

    function connectToElasticsearch(callback) {

        config = getConfig();

        es = new elasticsearch(config);
        es.testConnection(function (error) {
            callback(error, null);
        });

    },

    /**
     * Read the settings directory and keep track of the
     * directories, which designate the indices to create.
     * @param  {null}   data        No data passed to this callback
     * @param  {Function} callback  Callback function to fun
     * @return null
     */
    function findIndices(data, callback) {
        fs.readdir(config.settingsDir, function (error, data) {

            if (!data) {
                callback(new Error("No indices found."));
            } else {
                var indices = [];

                data.forEach(function (element) {

                    var stats = fs.statSync(config.settingsDir + element);

                    // find index directories
                    if (stats && stats.isDirectory()) {
                      indices.push(element);
                    }

                });

                callback(error, indices);
            }

        });
    },

    /**
     * Delete all indices that are going to be recreated
     * @param  {array}     data     Array of index names
     * @param  {Function} callback  Callback function
     * @return null
     */
    function deleteIndecies(data, callback) {

      es.deleteIndecies(data, function (error, body) {
          callback(error, data);
      });

    },

    /**
     * Create indices
     * @param  {array}     data     Array of index names
     * @param  {Function} callback  Callback function
     * @return null
     */
    function createIndices(data, callback) {
        async.each(data, createIndex, function (error) {
            callback(error, null);
        });
    },

    /**
     * Find the aliases configuration file
     * @param  {null}   data        No data passed to this callback
     * @param  {Function} callback  Callback function to fun
     * @return null
     */
    function findAliases(data, callback) {
        glob(config.settingsDir + "/aliases*", function (error, files) {
            callback(error, files);
        });
    },

    /**
     * Create aliases, if a confiration file was found
     * @param  {array}   data       Array of filenames
     * @param  {Function} callback  Callback function to fun
     * @return null
     */
    function createAliases(files, callback) {

        if (files.length === 0) {
            logger.log("No aliases found.", "yellow");
            return cb(null, null);
        }

        fs.readFile(files.shift(), "utf8", function (error, aliases) {
            es.putAliases(aliases, function (error, body) {
                if (!error) logger.log("Aliases set.", "cyan");
                callback(error, body);
            });
        });
    }

], function (error) {
    if (error) throw error;
});


function createIndex(index, callback) {

    async.waterfall([

        function findIndexSettings(cb) {
            glob(config.settingsDir + index + "/settings*", function (error, files) {
                cb(error, files);
            });
        },

        function settings(files, cb) {

            if (files.length === 0) {
                logger.log("No settings found for " + index + " index.", "yellow");
                return cb(null, null);
            }

            fs.readFile(files.shift(), "utf8", function (error, settings) {
                es.putSettings(index, settings, function (error, body) {
                    if (!error) logger.log("Settings set for " + index + " index.", "cyan");
                    cb(error, body);
                });
            });
        },

        function findMappings(data, cb) {
            glob(config.settingsDir + index + "/mappings/*", function (error, files) {
                if (error) return cb(error);
                cb(error, files);
            });
        },

        function mappings(files, cb) {

            if (files.length == 0) {
                logger.log("No mappings found for " + index + " index.", "yellow");
                return cb(null, null);
            }

            async.each(files, function (file, cb) {

                fs.readFile(file, "utf8", function (error, mapping) {
                    var type = path.basename(file).replace(path.extname(file), "");

                    es.putMapping(index, type, mapping, function (error, body) {
                        cb(error, body);
                        if (!error) logger.log("Mapping set for " + type + " type in " + index + " index.", "cyan");
                    });
                });

            }, function (error) {
                cb(error);
            });
        }

    ], function (error) {
        if (error) throw error;
        callback(null);
    });

}
