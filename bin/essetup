#!/usr/bin/env node

// modules
var async = require("async");
var fs = require("fs");
var getConfig = require("../lib/getConfig.js");
var logger = require("../lib/logger.js");
var elasticsearch = require("../lib/elasticsearch.js");


var config = {};
var es;

async.waterfall([

    function connectToElasticsearch(callback) {

        config = getConfig();

        es = new elasticsearch(config);
        es.testConnection(function (error) {
            callback(error, null);
        });

    },

    function deleteAll(data, callback) {
        es.deleteAll(function (error, body) {
            callback(error, body);
        });
    },
    
    function findIndicies(data, callback) {
        fs.readdir(config.settingsDir, function (error, data) {

            if (!data) {
                callback(new Error("No indicies found."));
            } else {
                var indicies = [];

                data.forEach(function (element) {
                    
                    var stats = fs.statSync(config.settingsDir + element);
                    if (stats && stats.isDirectory()) {
                        indicies.push(element);
                    }

                });

                callback(error, indicies);
            }
            
        });
    },

    function createIndicies(data, callback) {
        async.each(data, createIndex, function (error) {
            callback(error, null);
        });
    },

    function createAliases(data, callback) {
        var file = config.settingsDir + "aliases.json";

        fs.exists(file, function (exists) {

            if (exists) {
                fs.readFile(file, "utf8", function (error, aliases) {
                    es.putAliases(aliases, function (error, body) {
                        callback(error, body);
                    });
                });

            } else {
                callback(null, null);
            }

        });
    }

], function (error) {
    if (error) logger.error(error);
});


function createIndex(index, callback) {
    
    async.waterfall([

        function settings(callback) {
            var file = config.settingsDir + index + "/settings.json";

            fs.exists(file, function (exists) {

                if (exists) {

                    fs.readFile(file, "utf8", function (error, settings) {
                        es.putSettings(index, settings, function (error, body) {
                            callback(error, body);
                        });
                    });

                } else {
                    logger.log("No settings found for " + index + " index.", "cyan");
                    callback(null, null);
                }

            });
        },

        function mappings(data, callback) {
            var dir = config.settingsDir + index + "/mappings";

            async.waterfall([

                function mappingsDirExists(callback) {
                    
                    fs.exists(dir, function (exists) {
                        
                        if (exists) {
                            callback(null, exists);
                        } else {
                            logger.log("No mappings found for " + index + " index.", "cyan");
                            callback(null, null);
                        }

                    });

                },

                function getMappings(data, callback) {
                    fs.readdir(dir, function (error, mappings) {
                        callback(error, mappings);
                    });
                },

                function put(mappings, callback) {

                    async.each(mappings, function (file, callback) {

                        var type = file.replace(".json", "");
                        var file = dir + "/" + file;

                        fs.readFile(file, "utf8", function (error, mapping) {
                            es.putMapping(index, type, mapping, function (error, body) {
                                callback(error, body);
                            });
                        });

                    }, function (error) {
                        callback(error);
                    });
                }

            ], function (error) {
                callback(error);
            });
        }

    ], function (error) {
        if (error) logger.error(error);
    });

}